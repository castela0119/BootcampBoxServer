# Rookie PX Server 에러 요약 및 해결 방안

## 1. 컴파일 에러 (Compilation Errors)

### 1.1 Post 엔티티 필드 누락 에러
**에러 내용:**
```
cannot find symbol: method getCategory()
cannot find symbol: method getCommentCount()
cannot find symbol: method getViewCount()
```

**원인:** Post 엔티티에 category, commentCount, viewCount 필드가 정의되지 않음
**해결:** Post 엔티티에 해당 필드들을 추가

### 1.2 타입 변환 에러
**에러 내용:**
```
incompatible types: possible lossy conversion from long to int
```

**원인:** Repository의 count 메서드가 long을 반환하는데 int로 변환하려고 시도
**해결:** 명시적 캐스팅 또는 변수 타입을 long으로 변경

## 2. 데이터베이스 연결 에러

### 2.1 MySQL 연결 실패
**에러 내용:**
```
Access denied for user 'root'@'localhost' (using password: NO)
```

**원인:** MySQL 비밀번호 설정 문제 또는 환경변수 미설정
**해결:** 
- MySQL 비밀번호 설정
- application.properties에서 올바른 데이터베이스 정보 설정
- 환경변수 설정

### 2.2 H2 드라이버 누락
**에러 내용:**
```
ClassNotFoundException: org.h2.Driver
```

**원인:** build.gradle에 H2 의존성 누락
**해결:** build.gradle에 H2 의존성 추가

### 2.3 테이블 생성 실패
**에러 내용:**
```
Table 'users' not found
```

**원인:** JPA가 엔티티를 인식하지 못하거나 ddl-auto 설정 문제
**해결:** 
- ddl-auto를 create로 설정
- 엔티티 패키지 스캔 확인
- 클린 빌드 후 재시작

## 3. Spring Security 관련 에러

### 3.1 403 Forbidden 에러
**에러 내용:**
```
403 Forbidden
```

**원인:** SecurityConfig에서 인증 설정 문제
**해결:** 
- 개발 환경에서는 permitAll() 설정
- 운영 환경에서는 적절한 권한 설정

### 3.2 JWT 필터 설정 문제
**에러 내용:**
```
JWT 토큰 검증 실패
```

**원인:** JWT 설정 또는 필터 순서 문제
**해결:** SecurityConfig에서 필터 순서 조정

## 4. 포트 충돌 에러

### 4.1 포트 8080 사용 중
**에러 내용:**
```
Port 8080 was already in use
```

**원인:** 다른 프로세스가 8080 포트 사용 중
**해결:** 
- 기존 프로세스 종료
- 다른 포트 사용
- lsof -ti:8080 | xargs kill -9

## 5. 빌드 및 실행 에러

### 5.1 Gradle 빌드 실패
**에러 내용:**
```
BUILD FAILED
```

**원인:** 컴파일 에러 또는 의존성 문제
**해결:** 
- 컴파일 에러 수정
- ./gradlew clean build
- 의존성 확인

### 5.2 JAR 파일 실행 실패
**에러 내용:**
```
Unable to access jarfile
```

**원인:** JAR 파일이 생성되지 않음
**해결:** 
- ./gradlew build 실행
- build/libs 디렉토리 확인

## 6. 코드 구조적 문제점

### 6.1 엔티티 설계 문제
**문제:** 
- 필드 누락 (category, commentCount, viewCount 등)
- 관계 매핑 불완전
- 제약조건 누락

**해결:** 
- 엔티티 설계 시 모든 필요한 필드 포함
- 관계 매핑 완성
- 적절한 제약조건 설정

### 6.2 DTO 설계 문제
**문제:** 
- 엔티티와 DTO 간 필드 불일치
- 불필요한 필드 포함
- 검증 로직 누락

**해결:** 
- 엔티티와 DTO 간 일관성 유지
- 필요한 필드만 포함
- 적절한 검증 로직 추가

### 6.3 Repository 메서드 문제
**문제:** 
- 반환 타입 불일치 (long vs int)
- 메서드명 규칙 위반
- 쿼리 최적화 부족

**해결:** 
- 일관된 반환 타입 사용
- Spring Data JPA 네이밍 규칙 준수
- 쿼리 최적화

## 7. 환경 설정 문제

### 7.1 환경별 설정 분리 부족
**문제:** 
- 로컬/운영 환경 설정 혼재
- 보안 설정 환경별 차이 없음

**해결:** 
- @Profile 어노테이션 사용
- 환경별 설정 파일 분리
- SecurityConfig 분리

### 7.2 데이터베이스 설정 문제
**문제:** 
- MySQL/H2 환경 전환 어려움
- 연결 정보 하드코딩

**해결:** 
- 환경변수 사용
- 스크립트 파일 생성
- 설정 파일 분리

## 8. 예방 및 해결 방안

### 8.1 개발 단계별 체크리스트
1. 엔티티 설계 시 모든 필드 포함 확인
2. DTO와 엔티티 간 일관성 확인
3. Repository 메서드 반환 타입 확인
4. 환경별 설정 분리 확인
5. 보안 설정 환경별 적용 확인

### 8.2 테스트 방법
1. 컴파일 테스트: ./gradlew compileJava
2. 빌드 테스트: ./gradlew build
3. 서버 실행 테스트: ./gradlew bootRun
4. API 테스트: curl 명령어 사용

### 8.3 디버깅 방법
1. 로그 확인: application.properties에서 로그 레벨 설정
2. 데이터베이스 연결 확인: 스크립트 사용
3. 포트 사용 확인: lsof -i:8080
4. 프로세스 확인: ps aux | grep java

## 9. 자주 사용하는 명령어

### 9.1 빌드 및 실행
```bash
./gradlew clean build
./gradlew bootRun
./run-h2.sh
./run-mysql.sh
```

### 9.2 문제 해결
```bash
lsof -ti:8080 | xargs kill -9  # 포트 충돌 해결
./test-mysql-connection.sh     # MySQL 연결 테스트
```

### 9.3 API 테스트
```bash
curl -X POST http://localhost:8080/api/auth/signup \
  -H "Content-Type: application/json" \
  -d '{"phoneNumber":"010-1234-5678","password":"password123","nickname":"testuser"}'
```

## 10. 권장사항

1. **개발 전:** 엔티티 설계를 완전히 하고 시작
2. **개발 중:** 컴파일 에러 즉시 수정
3. **테스트:** 각 기능 구현 후 즉시 테스트
4. **문서화:** API 문서와 에러 해결 방법 기록
5. **환경 분리:** 로컬/운영 환경 설정 완전 분리 