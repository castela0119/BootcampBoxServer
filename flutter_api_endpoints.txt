# Flutter API 연동 명세서 - 좋아요 기능

## 🎯 좋아요 토글 API (권장)

### 게시글 좋아요 토글
```dart
import 'package:http/http.dart' as http;
import 'dart:convert';

class ApiService {
  static const String baseUrl = 'http://localhost:8080';
  static String? token;

  static Map<String, String> get headers {
    Map<String, String> headers = {
      'Content-Type': 'application/json',
    };
    if (token != null) {
      headers['Authorization'] = 'Bearer $token';
    }
    return headers;
  }

  // 게시글 좋아요 토글 (추가/취소)
  static Future<Map<String, dynamic>> togglePostLike(int postId) async {
    final response = await http.post(
      Uri.parse('$baseUrl/api/posts/$postId/toggle-like'),
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
    );
    
    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception('좋아요 토글 실패');
    }
  }
}
```

**응답 예시:**
```json
{
  "message": "좋아요가 추가되었습니다.",
  "count": 5,
  "liked": true,
  "reported": false,
  "bookmarked": false
}
```

### 댓글 좋아요 토글
```dart
import 'package:http/http.dart' as http;
import 'dart:convert';

class ApiService {
  static const String baseUrl = 'http://localhost:8080';
  static String? token;

  static Map<String, String> get headers {
    Map<String, String> headers = {
      'Content-Type': 'application/json',
    };
    if (token != null) {
      headers['Authorization'] = 'Bearer $token';
    }
    return headers;
  }

  // 댓글 좋아요 토글 (추가/취소)
  static Future<Map<String, dynamic>> toggleCommentLike(int commentId) async {
    final response = await http.post(
      Uri.parse('$baseUrl/api/comments/$commentId/toggle-like'),
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $token',
      },
    );
    
    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception('댓글 좋아요 토글 실패');
    }
  }
}
```

**응답 예시:**
```json
{
  "message": "좋아요가 취소되었습니다.",
  "count": 3,
  "liked": false
}
```

## ⚠️ 중요 사항

### 1. 엔드포인트 변경
- **기존**: `/api/posts/{id}/like` (POST/DELETE)
- **변경**: `/api/posts/{id}/toggle-like` (POST)

### 2. 토글 방식
- 한 번 호출하면 좋아요 추가
- 다시 호출하면 좋아요 취소
- 응답의 `liked` 필드로 현재 상태 확인

### 3. 응답 필드
- `count`: 현재 좋아요 수
- `liked`: 현재 사용자의 좋아요 상태 (true/false)
- `message`: 작업 결과 메시지

## 🔧 사용 예시

```dart
class PostDetailPage extends StatefulWidget {
  @override
  _PostDetailPageState createState() => _PostDetailPageState();
}

class _PostDetailPageState extends State<PostDetailPage> {
  bool isLiked = false;
  int likeCount = 0;
  
  // 좋아요 토글
  Future<void> _toggleLike() async {
    try {
      final result = await togglePostLike(widget.postId);
      setState(() {
        isLiked = result['liked'];
        likeCount = result['count'];
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(result['message'])),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('좋아요 처리 중 오류가 발생했습니다.')),
      );
    }
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('게시글 상세')),
      body: Column(
        children: [
          // 게시글 내용...
          
          // 좋아요 버튼
          Row(
            children: [
              IconButton(
                icon: Icon(
                  isLiked ? Icons.favorite : Icons.favorite_border,
                  color: isLiked ? Colors.red : Colors.grey,
                ),
                onPressed: _toggleLike,
              ),
              Text('$likeCount'),
            ],
          ),
        ],
      ),
    );
  }
}
```

## 📝 API 테스트

### curl 명령어로 테스트
```bash
# 게시글 좋아요 토글
curl -X POST http://localhost:8080/api/posts/24/toggle-like \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"

# 댓글 좋아요 토글
curl -X POST http://localhost:8080/api/comments/15/toggle-like \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"
```

## 🚨 주의사항

1. **JWT 토큰 필수**: 모든 좋아요 API는 인증이 필요합니다.
2. **토글 방식**: 좋아요 추가/취소를 하나의 엔드포인트로 처리합니다.
3. **상태 동기화**: 응답의 `liked` 필드로 UI 상태를 업데이트하세요.
4. **에러 처리**: 네트워크 오류나 인증 실패 시 적절한 에러 처리가 필요합니다.

## 📋 구현 체크리스트

- [ ] Flutter에서 `/toggle-like` 엔드포인트 사용
- [ ] 좋아요 버튼 UI 구현 (아이콘 변경)
- [ ] 좋아요 수 표시
- [ ] 토글 상태에 따른 UI 업데이트
- [ ] 에러 처리 및 사용자 피드백
- [ ] JWT 토큰 인증 처리 